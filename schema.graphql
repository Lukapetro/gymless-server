### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Card {
  brand: String!
}

type Cordinates {
  address: String
  city: String
  id: Int!
  latitude: Float
  longitude: Float
  workout(after: WorkoutWhereUniqueInput, before: WorkoutWhereUniqueInput, first: Int, last: Int): [Workout!]!
}

input CordinatesCreateInput {
  address: String
  city: String
  latitude: Float
  longitude: Float
  workout: WorkoutCreateManyWithoutCordinatesInput
}

input CordinatesCreateOneWithoutWorkoutInput {
  connect: CordinatesWhereUniqueInput
  create: CordinatesCreateWithoutWorkoutInput
}

input CordinatesCreateWithoutWorkoutInput {
  address: String
  city: String
  latitude: Float
  longitude: Float
}

input CordinatesUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  latitude: NullableFloatFieldUpdateOperationsInput
  longitude: NullableFloatFieldUpdateOperationsInput
  workout: WorkoutUpdateManyWithoutCordinatesInput
}

input CordinatesUpdateOneWithoutWorkoutInput {
  connect: CordinatesWhereUniqueInput
  create: CordinatesCreateWithoutWorkoutInput
  delete: Boolean
  disconnect: Boolean
  update: CordinatesUpdateWithoutWorkoutDataInput
  upsert: CordinatesUpsertWithoutWorkoutInput
}

input CordinatesUpdateWithoutWorkoutDataInput {
  address: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  latitude: NullableFloatFieldUpdateOperationsInput
  longitude: NullableFloatFieldUpdateOperationsInput
}

input CordinatesUpsertWithoutWorkoutInput {
  create: CordinatesCreateWithoutWorkoutInput!
  update: CordinatesUpdateWithoutWorkoutDataInput!
}

input CordinatesWhereInput {
  address: StringNullableFilter
  AND: [CordinatesWhereInput!]
  city: StringNullableFilter
  id: IntFilter
  latitude: FloatNullableFilter
  longitude: FloatNullableFilter
  NOT: [CordinatesWhereInput!]
  OR: [CordinatesWhereInput!]
  workout: WorkoutListRelationFilter
}

input CordinatesWhereUniqueInput {
  id: Int
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

enum Gymler {
  basic
  early
}

input IntFieldUpdateOperationsInput {
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar JSON

type Mutation {
  bookClass(id: Int!, isFree: Boolean): Workout!
  bookOnlineClass(id: Int!, isFree: Boolean): Workout!
  changePassword(password: String!, token: String!): User!
  confirmUser(token: String!): Boolean!
  createOneCordinates(data: CordinatesCreateInput!): Cordinates!
  CreateOnlineWorkout(date: DateTime, description: String, duration: Int!, isFree: Boolean, link: String!, passcode: String!, spots: Int!, title: String!, zoomId: String!): Workout!
  createWorkout(cordinatesId: Int, date: DateTime, description: String, duration: Int!, isFree: Boolean, spots: Int!, title: String!, typology: Typology): Workout!
  deleteBooking(id: ID, isFree: Boolean): Workout!
  deleteOneCordinates(where: CordinatesWhereUniqueInput!): Cordinates
  deleteOneWorkout(where: WorkoutWhereUniqueInput!): Workout
  deleteOnlineBooking(id: ID, isFree: Boolean): Workout!
  deleteUser: User!
  detachPaymentMethod(id: String!): JSON!
  facebookConnect(fbToken: String!): User!
  facebookDisconnect: User!
  facebookLogin(fbToken: String!): AuthPayload!
  forgotPassword(email: String!): Boolean!
  login(email: String!, password: String!): AuthPayload!
  paymentIntent(amount: Int!): JSON!
  recordAttendance(userId: Int!, workoutId: Int!): Boolean!
  sendHelpRequest(message: String): Boolean!
  setupIntent: String!
  signup(birthDate: Date, email: String!, name: String!, password: String!, referrerId: Int, surname: String!): AuthPayload!
  trainerLogin(email: String!, password: String!): AuthPayload!
  updateAvatar(avatarId: String): User!
  updateOneCordinates(data: CordinatesUpdateInput!, where: CordinatesWhereUniqueInput!): Cordinates
  updateOneWorkout(data: WorkoutUpdateInput!, where: WorkoutWhereUniqueInput!): Workout
  updateOnlineWorkout(date: DateTime, description: String, duration: Int, id: Int!, isFree: Boolean, link: String, passcode: String, spots: Int, title: String, zoomId: String): Workout!
  updateOutdoorWorkout(date: DateTime, description: String, duration: Int, id: Int!, isFree: Boolean, spots: Int, title: String): Workout!
  updateUser(birthDate: Date, email: String, name: String, sex: Sex, surname: String): User!
  updateUserClasses(classes: Int!): User!
  updateUserOnlineClasses(onlineClasses: Int!): User!
  updateUserPassword(newPassword: String, oldPassword: String): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type OnlineWorkout {
  id: Int!
  link: String!
  passcode: String!
  workout: Workout!
  workoutId: Int!
  zoomId: String!
}

input OnlineWorkoutCreateOneWithoutWorkoutInput {
  connect: OnlineWorkoutWhereUniqueInput
  create: OnlineWorkoutCreateWithoutWorkoutInput
}

input OnlineWorkoutCreateWithoutWorkoutInput {
  link: String!
  passcode: String!
  zoomId: String!
}

input OnlineWorkoutUpdateOneWithoutWorkoutInput {
  connect: OnlineWorkoutWhereUniqueInput
  create: OnlineWorkoutCreateWithoutWorkoutInput
  delete: Boolean
  disconnect: Boolean
  update: OnlineWorkoutUpdateWithoutWorkoutDataInput
  upsert: OnlineWorkoutUpsertWithoutWorkoutInput
}

input OnlineWorkoutUpdateWithoutWorkoutDataInput {
  link: StringFieldUpdateOperationsInput
  passcode: StringFieldUpdateOperationsInput
  zoomId: StringFieldUpdateOperationsInput
}

input OnlineWorkoutUpsertWithoutWorkoutInput {
  create: OnlineWorkoutCreateWithoutWorkoutInput!
  update: OnlineWorkoutUpdateWithoutWorkoutDataInput!
}

input OnlineWorkoutWhereInput {
  AND: [OnlineWorkoutWhereInput!]
  id: IntFilter
  link: StringFilter
  NOT: [OnlineWorkoutWhereInput!]
  OR: [OnlineWorkoutWhereInput!]
  passcode: StringFilter
  workout: WorkoutWhereInput
  workoutId: IntFilter
  zoomId: StringFilter
}

input OnlineWorkoutWhereUniqueInput {
  id: Int
}

type PaymentMethods {
  data: [Card!]!
}

type Query {
  cordinates(after: CordinatesWhereUniqueInput, before: CordinatesWhereUniqueInput, first: Int, last: Int): [Cordinates!]!
  demolishedGymless: Int!
  futureWorkouts: [Workout!]!
  me: User!
  pastWorkouts: [Workout!]!
  paymentMethods: JSON!
  referral(where: ReferralWhereUniqueInput!): Referral
  referrals(after: ReferralWhereUniqueInput, before: ReferralWhereUniqueInput, first: Int, last: Int): [Referral!]!
  userAvailableWorkouts(endDate: DateTime, startDate: DateTime): [Workout!]!
  workout(where: WorkoutWhereUniqueInput!): Workout
  workouts(after: WorkoutWhereUniqueInput, before: WorkoutWhereUniqueInput, first: Int, last: Int, orderBy: [WorkoutOrderByInput!], where: WorkoutWhereInput): [Workout!]!
  workoutsBooked: [Workout!]!
}

type Referral {
  completed: Boolean!
  createdAt: DateTime!
  id: Int!
  referred: User!
  referredId: Int!
  referrer: User!
  referrerId: Int!
  updatedAt: DateTime!
}

input ReferralCreateManyWithoutReferredInput {
  connect: [ReferralWhereUniqueInput!]
  create: [ReferralCreateWithoutReferredInput!]
}

input ReferralCreateManyWithoutReferrerInput {
  connect: [ReferralWhereUniqueInput!]
  create: [ReferralCreateWithoutReferrerInput!]
}

input ReferralCreateWithoutReferredInput {
  completed: Boolean
  createdAt: DateTime
  referrer: UserCreateOneWithoutReferrerInput!
  updatedAt: DateTime
}

input ReferralCreateWithoutReferrerInput {
  completed: Boolean
  createdAt: DateTime
  referred: UserCreateOneWithoutReferralInput!
  updatedAt: DateTime
}

input ReferralListRelationFilter {
  every: ReferralWhereInput
  none: ReferralWhereInput
  some: ReferralWhereInput
}

input ReferralScalarWhereInput {
  AND: [ReferralScalarWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ReferralScalarWhereInput!]
  OR: [ReferralScalarWhereInput!]
  referredId: IntFilter
  referrerId: IntFilter
  updatedAt: DateTimeFilter
}

input ReferralUpdateManyDataInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReferralUpdateManyWithoutReferredInput {
  connect: [ReferralWhereUniqueInput!]
  create: [ReferralCreateWithoutReferredInput!]
  delete: [ReferralWhereUniqueInput!]
  deleteMany: [ReferralScalarWhereInput!]
  disconnect: [ReferralWhereUniqueInput!]
  set: [ReferralWhereUniqueInput!]
  update: [ReferralUpdateWithWhereUniqueWithoutReferredInput!]
  updateMany: [ReferralUpdateManyWithWhereNestedInput!]
  upsert: [ReferralUpsertWithWhereUniqueWithoutReferredInput!]
}

input ReferralUpdateManyWithoutReferrerInput {
  connect: [ReferralWhereUniqueInput!]
  create: [ReferralCreateWithoutReferrerInput!]
  delete: [ReferralWhereUniqueInput!]
  deleteMany: [ReferralScalarWhereInput!]
  disconnect: [ReferralWhereUniqueInput!]
  set: [ReferralWhereUniqueInput!]
  update: [ReferralUpdateWithWhereUniqueWithoutReferrerInput!]
  updateMany: [ReferralUpdateManyWithWhereNestedInput!]
  upsert: [ReferralUpsertWithWhereUniqueWithoutReferrerInput!]
}

input ReferralUpdateManyWithWhereNestedInput {
  data: ReferralUpdateManyDataInput!
  where: ReferralScalarWhereInput!
}

input ReferralUpdateWithoutReferredDataInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  referrer: UserUpdateOneRequiredWithoutReferrerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReferralUpdateWithoutReferrerDataInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  referred: UserUpdateOneRequiredWithoutReferralInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReferralUpdateWithWhereUniqueWithoutReferredInput {
  data: ReferralUpdateWithoutReferredDataInput!
  where: ReferralWhereUniqueInput!
}

input ReferralUpdateWithWhereUniqueWithoutReferrerInput {
  data: ReferralUpdateWithoutReferrerDataInput!
  where: ReferralWhereUniqueInput!
}

input ReferralUpsertWithWhereUniqueWithoutReferredInput {
  create: ReferralCreateWithoutReferredInput!
  update: ReferralUpdateWithoutReferredDataInput!
  where: ReferralWhereUniqueInput!
}

input ReferralUpsertWithWhereUniqueWithoutReferrerInput {
  create: ReferralCreateWithoutReferrerInput!
  update: ReferralUpdateWithoutReferrerDataInput!
  where: ReferralWhereUniqueInput!
}

input ReferralWhereInput {
  AND: [ReferralWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ReferralWhereInput!]
  OR: [ReferralWhereInput!]
  referred: UserWhereInput
  referredId: IntFilter
  referrer: UserWhereInput
  referrerId: IntFilter
  updatedAt: DateTimeFilter
}

input ReferralWhereUniqueInput {
  id: Int
  referredId: Int
}

enum Role {
  admin
  trainer
  user
}

"""The sex of the user"""
enum Sex {
  female
  male
  unknown
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""The workout typology"""
enum Typology {
  online
  outdoor
}

type User {
  avatarId: String
  bio: String
  birthDate: DateTime
  classes: Int!
  confirmed: Boolean!
  customerId: String
  email: String!
  facebookId: String
  gymlerType: Gymler!
  id: Int!
  lastLoggedIn: DateTime
  name: String!
  onlineClasses: Int!
  referral(after: ReferralWhereUniqueInput, before: ReferralWhereUniqueInput, first: Int, last: Int): [Referral!]!
  referrer(after: ReferralWhereUniqueInput, before: ReferralWhereUniqueInput, first: Int, last: Int): [Referral!]!
  role: Role!
  sex: Sex!
  stripeId: String
  surname: String
  workouts(after: UsersOnWorkoutsWhereUniqueInput, before: UsersOnWorkoutsWhereUniqueInput, first: Int, last: Int): [UsersOnWorkouts!]!
}

input UserCreateOneWithoutReferralInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReferralInput
}

input UserCreateOneWithoutReferrerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReferrerInput
}

input UserCreateOneWithoutTrainInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrainInput
}

input UserCreateOneWithoutWorkoutsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWorkoutsInput
}

input UserCreateWithoutReferralInput {
  avatarId: String
  bio: String
  birthDate: DateTime
  classes: Int
  confirmed: Boolean
  customerId: String
  email: String!
  facebookId: String
  gymlerType: Gymler
  lastLoggedIn: DateTime
  name: String!
  onlineClasses: Int
  password: String!
  referrer: ReferralCreateManyWithoutReferrerInput
  role: Role
  sex: Sex
  stripeId: String
  surname: String
  train: WorkoutCreateManyWithoutTrainerInput
  workouts: UsersOnWorkoutsCreateManyWithoutUserInput
}

input UserCreateWithoutReferrerInput {
  avatarId: String
  bio: String
  birthDate: DateTime
  classes: Int
  confirmed: Boolean
  customerId: String
  email: String!
  facebookId: String
  gymlerType: Gymler
  lastLoggedIn: DateTime
  name: String!
  onlineClasses: Int
  password: String!
  referral: ReferralCreateManyWithoutReferredInput
  role: Role
  sex: Sex
  stripeId: String
  surname: String
  train: WorkoutCreateManyWithoutTrainerInput
  workouts: UsersOnWorkoutsCreateManyWithoutUserInput
}

input UserCreateWithoutTrainInput {
  avatarId: String
  bio: String
  birthDate: DateTime
  classes: Int
  confirmed: Boolean
  customerId: String
  email: String!
  facebookId: String
  gymlerType: Gymler
  lastLoggedIn: DateTime
  name: String!
  onlineClasses: Int
  password: String!
  referral: ReferralCreateManyWithoutReferredInput
  referrer: ReferralCreateManyWithoutReferrerInput
  role: Role
  sex: Sex
  stripeId: String
  surname: String
  workouts: UsersOnWorkoutsCreateManyWithoutUserInput
}

input UserCreateWithoutWorkoutsInput {
  avatarId: String
  bio: String
  birthDate: DateTime
  classes: Int
  confirmed: Boolean
  customerId: String
  email: String!
  facebookId: String
  gymlerType: Gymler
  lastLoggedIn: DateTime
  name: String!
  onlineClasses: Int
  password: String!
  referral: ReferralCreateManyWithoutReferredInput
  referrer: ReferralCreateManyWithoutReferrerInput
  role: Role
  sex: Sex
  stripeId: String
  surname: String
  train: WorkoutCreateManyWithoutTrainerInput
}

type UsersOnWorkouts {
  attended: Boolean!
  createdAt: DateTime!
  user: User!
  userId: Int!
  workout: Workout!
  workoutId: Int!
}

input UsersOnWorkoutsCreateManyWithoutUserInput {
  connect: [UsersOnWorkoutsWhereUniqueInput!]
  create: [UsersOnWorkoutsCreateWithoutUserInput!]
}

input UsersOnWorkoutsCreateManyWithoutWorkoutInput {
  connect: [UsersOnWorkoutsWhereUniqueInput!]
  create: [UsersOnWorkoutsCreateWithoutWorkoutInput!]
}

input UsersOnWorkoutsCreateWithoutUserInput {
  attended: Boolean
  createdAt: DateTime
  workout: WorkoutCreateOneWithoutPartecipantsInput!
}

input UsersOnWorkoutsCreateWithoutWorkoutInput {
  attended: Boolean
  createdAt: DateTime
  user: UserCreateOneWithoutWorkoutsInput!
}

input UsersOnWorkoutsListRelationFilter {
  every: UsersOnWorkoutsWhereInput
  none: UsersOnWorkoutsWhereInput
  some: UsersOnWorkoutsWhereInput
}

input UsersOnWorkoutsScalarWhereInput {
  AND: [UsersOnWorkoutsScalarWhereInput!]
  attended: BoolFilter
  createdAt: DateTimeFilter
  NOT: [UsersOnWorkoutsScalarWhereInput!]
  OR: [UsersOnWorkoutsScalarWhereInput!]
  userId: IntFilter
  workoutId: IntFilter
}

input UsersOnWorkoutsUpdateManyDataInput {
  attended: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnWorkoutsUpdateManyWithoutUserInput {
  connect: [UsersOnWorkoutsWhereUniqueInput!]
  create: [UsersOnWorkoutsCreateWithoutUserInput!]
  delete: [UsersOnWorkoutsWhereUniqueInput!]
  deleteMany: [UsersOnWorkoutsScalarWhereInput!]
  disconnect: [UsersOnWorkoutsWhereUniqueInput!]
  set: [UsersOnWorkoutsWhereUniqueInput!]
  update: [UsersOnWorkoutsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnWorkoutsUpdateManyWithWhereNestedInput!]
  upsert: [UsersOnWorkoutsUpsertWithWhereUniqueWithoutUserInput!]
}

input UsersOnWorkoutsUpdateManyWithoutWorkoutInput {
  connect: [UsersOnWorkoutsWhereUniqueInput!]
  create: [UsersOnWorkoutsCreateWithoutWorkoutInput!]
  delete: [UsersOnWorkoutsWhereUniqueInput!]
  deleteMany: [UsersOnWorkoutsScalarWhereInput!]
  disconnect: [UsersOnWorkoutsWhereUniqueInput!]
  set: [UsersOnWorkoutsWhereUniqueInput!]
  update: [UsersOnWorkoutsUpdateWithWhereUniqueWithoutWorkoutInput!]
  updateMany: [UsersOnWorkoutsUpdateManyWithWhereNestedInput!]
  upsert: [UsersOnWorkoutsUpsertWithWhereUniqueWithoutWorkoutInput!]
}

input UsersOnWorkoutsUpdateManyWithWhereNestedInput {
  data: UsersOnWorkoutsUpdateManyDataInput!
  where: UsersOnWorkoutsScalarWhereInput!
}

input UsersOnWorkoutsUpdateWithoutUserDataInput {
  attended: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  workout: WorkoutUpdateOneRequiredWithoutPartecipantsInput
}

input UsersOnWorkoutsUpdateWithoutWorkoutDataInput {
  attended: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWorkoutsInput
}

input UsersOnWorkoutsUpdateWithWhereUniqueWithoutUserInput {
  data: UsersOnWorkoutsUpdateWithoutUserDataInput!
  where: UsersOnWorkoutsWhereUniqueInput!
}

input UsersOnWorkoutsUpdateWithWhereUniqueWithoutWorkoutInput {
  data: UsersOnWorkoutsUpdateWithoutWorkoutDataInput!
  where: UsersOnWorkoutsWhereUniqueInput!
}

input UsersOnWorkoutsUpsertWithWhereUniqueWithoutUserInput {
  create: UsersOnWorkoutsCreateWithoutUserInput!
  update: UsersOnWorkoutsUpdateWithoutUserDataInput!
  where: UsersOnWorkoutsWhereUniqueInput!
}

input UsersOnWorkoutsUpsertWithWhereUniqueWithoutWorkoutInput {
  create: UsersOnWorkoutsCreateWithoutWorkoutInput!
  update: UsersOnWorkoutsUpdateWithoutWorkoutDataInput!
  where: UsersOnWorkoutsWhereUniqueInput!
}

input UsersOnWorkoutsWhereInput {
  AND: [UsersOnWorkoutsWhereInput!]
  attended: BoolFilter
  createdAt: DateTimeFilter
  NOT: [UsersOnWorkoutsWhereInput!]
  OR: [UsersOnWorkoutsWhereInput!]
  user: UserWhereInput
  userId: IntFilter
  workout: WorkoutWhereInput
  workoutId: IntFilter
}

input UsersOnWorkoutsWhereUniqueInput {
  workoutId_userId: WorkoutIdUserIdCompoundUniqueInput
}

input UserUpdateOneRequiredWithoutReferralInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReferralInput
  update: UserUpdateWithoutReferralDataInput
  upsert: UserUpsertWithoutReferralInput
}

input UserUpdateOneRequiredWithoutReferrerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReferrerInput
  update: UserUpdateWithoutReferrerDataInput
  upsert: UserUpsertWithoutReferrerInput
}

input UserUpdateOneRequiredWithoutTrainInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrainInput
  update: UserUpdateWithoutTrainDataInput
  upsert: UserUpsertWithoutTrainInput
}

input UserUpdateOneRequiredWithoutWorkoutsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWorkoutsInput
  update: UserUpdateWithoutWorkoutsDataInput
  upsert: UserUpsertWithoutWorkoutsInput
}

input UserUpdateWithoutReferralDataInput {
  avatarId: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  birthDate: NullableDateTimeFieldUpdateOperationsInput
  classes: IntFieldUpdateOperationsInput
  confirmed: BoolFieldUpdateOperationsInput
  customerId: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  facebookId: NullableStringFieldUpdateOperationsInput
  gymlerType: Gymler
  lastLoggedIn: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  onlineClasses: IntFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  referrer: ReferralUpdateManyWithoutReferrerInput
  role: Role
  sex: Sex
  stripeId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  train: WorkoutUpdateManyWithoutTrainerInput
  workouts: UsersOnWorkoutsUpdateManyWithoutUserInput
}

input UserUpdateWithoutReferrerDataInput {
  avatarId: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  birthDate: NullableDateTimeFieldUpdateOperationsInput
  classes: IntFieldUpdateOperationsInput
  confirmed: BoolFieldUpdateOperationsInput
  customerId: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  facebookId: NullableStringFieldUpdateOperationsInput
  gymlerType: Gymler
  lastLoggedIn: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  onlineClasses: IntFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  referral: ReferralUpdateManyWithoutReferredInput
  role: Role
  sex: Sex
  stripeId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  train: WorkoutUpdateManyWithoutTrainerInput
  workouts: UsersOnWorkoutsUpdateManyWithoutUserInput
}

input UserUpdateWithoutTrainDataInput {
  avatarId: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  birthDate: NullableDateTimeFieldUpdateOperationsInput
  classes: IntFieldUpdateOperationsInput
  confirmed: BoolFieldUpdateOperationsInput
  customerId: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  facebookId: NullableStringFieldUpdateOperationsInput
  gymlerType: Gymler
  lastLoggedIn: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  onlineClasses: IntFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  referral: ReferralUpdateManyWithoutReferredInput
  referrer: ReferralUpdateManyWithoutReferrerInput
  role: Role
  sex: Sex
  stripeId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  workouts: UsersOnWorkoutsUpdateManyWithoutUserInput
}

input UserUpdateWithoutWorkoutsDataInput {
  avatarId: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  birthDate: NullableDateTimeFieldUpdateOperationsInput
  classes: IntFieldUpdateOperationsInput
  confirmed: BoolFieldUpdateOperationsInput
  customerId: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  facebookId: NullableStringFieldUpdateOperationsInput
  gymlerType: Gymler
  lastLoggedIn: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  onlineClasses: IntFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  referral: ReferralUpdateManyWithoutReferredInput
  referrer: ReferralUpdateManyWithoutReferrerInput
  role: Role
  sex: Sex
  stripeId: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  train: WorkoutUpdateManyWithoutTrainerInput
}

input UserUpsertWithoutReferralInput {
  create: UserCreateWithoutReferralInput!
  update: UserUpdateWithoutReferralDataInput!
}

input UserUpsertWithoutReferrerInput {
  create: UserCreateWithoutReferrerInput!
  update: UserUpdateWithoutReferrerDataInput!
}

input UserUpsertWithoutTrainInput {
  create: UserCreateWithoutTrainInput!
  update: UserUpdateWithoutTrainDataInput!
}

input UserUpsertWithoutWorkoutsInput {
  create: UserCreateWithoutWorkoutsInput!
  update: UserUpdateWithoutWorkoutsDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatarId: StringNullableFilter
  bio: StringNullableFilter
  birthDate: DateTimeNullableFilter
  classes: IntFilter
  confirmed: BoolFilter
  customerId: StringNullableFilter
  email: StringFilter
  facebookId: StringNullableFilter
  gymlerType: Gymler
  id: IntFilter
  lastLoggedIn: DateTimeNullableFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  onlineClasses: IntFilter
  OR: [UserWhereInput!]
  password: StringFilter
  referral: ReferralListRelationFilter
  referrer: ReferralListRelationFilter
  role: Role
  sex: Sex
  stripeId: StringNullableFilter
  surname: StringNullableFilter
  train: WorkoutListRelationFilter
  workouts: UsersOnWorkoutsListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Workout {
  cordinates: Cordinates
  date: DateTime
  description: String
  duration: Int!
  id: Int!
  isFree: Boolean!
  onlineWorkout: OnlineWorkout
  partecipants(after: UsersOnWorkoutsWhereUniqueInput, before: UsersOnWorkoutsWhereUniqueInput, first: Int, last: Int): [UsersOnWorkouts!]!
  spots: Int!
  title: String!
  trainer: User!
  typology: Typology!
}

input WorkoutCreateManyWithoutCordinatesInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutCordinatesInput!]
}

input WorkoutCreateManyWithoutTrainerInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutTrainerInput!]
}

input WorkoutCreateOneWithoutPartecipantsInput {
  connect: WorkoutWhereUniqueInput
  create: WorkoutCreateWithoutPartecipantsInput
}

input WorkoutCreateWithoutCordinatesInput {
  createdAt: DateTime
  date: DateTime
  description: String
  duration: Int!
  isFree: Boolean
  onlineWorkout: OnlineWorkoutCreateOneWithoutWorkoutInput
  partecipants: UsersOnWorkoutsCreateManyWithoutWorkoutInput
  spots: Int
  title: String!
  trainer: UserCreateOneWithoutTrainInput!
  typology: Typology
}

input WorkoutCreateWithoutPartecipantsInput {
  cordinates: CordinatesCreateOneWithoutWorkoutInput
  createdAt: DateTime
  date: DateTime
  description: String
  duration: Int!
  isFree: Boolean
  onlineWorkout: OnlineWorkoutCreateOneWithoutWorkoutInput
  spots: Int
  title: String!
  trainer: UserCreateOneWithoutTrainInput!
  typology: Typology
}

input WorkoutCreateWithoutTrainerInput {
  cordinates: CordinatesCreateOneWithoutWorkoutInput
  createdAt: DateTime
  date: DateTime
  description: String
  duration: Int!
  isFree: Boolean
  onlineWorkout: OnlineWorkoutCreateOneWithoutWorkoutInput
  partecipants: UsersOnWorkoutsCreateManyWithoutWorkoutInput
  spots: Int
  title: String!
  typology: Typology
}

input WorkoutIdUserIdCompoundUniqueInput {
  userId: Int!
  workoutId: Int!
}

input WorkoutListRelationFilter {
  every: WorkoutWhereInput
  none: WorkoutWhereInput
  some: WorkoutWhereInput
}

input WorkoutOrderByInput {
  cordinatesId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  duration: SortOrder
  id: SortOrder
  isFree: SortOrder
  spots: SortOrder
  title: SortOrder
  trainerId: SortOrder
  typology: SortOrder
}

input WorkoutScalarWhereInput {
  AND: [WorkoutScalarWhereInput!]
  cordinatesId: IntNullableFilter
  createdAt: DateTimeFilter
  date: DateTimeNullableFilter
  description: StringNullableFilter
  duration: IntFilter
  id: IntFilter
  isFree: BoolFilter
  NOT: [WorkoutScalarWhereInput!]
  OR: [WorkoutScalarWhereInput!]
  spots: IntFilter
  title: StringFilter
  trainerId: IntFilter
  typology: Typology
}

input WorkoutUpdateInput {
  cordinates: CordinatesUpdateOneWithoutWorkoutInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  isFree: BoolFieldUpdateOperationsInput
  onlineWorkout: OnlineWorkoutUpdateOneWithoutWorkoutInput
  partecipants: UsersOnWorkoutsUpdateManyWithoutWorkoutInput
  spots: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  trainer: UserUpdateOneRequiredWithoutTrainInput
  typology: Typology
}

input WorkoutUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  isFree: BoolFieldUpdateOperationsInput
  spots: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  typology: Typology
}

input WorkoutUpdateManyWithoutCordinatesInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutCordinatesInput!]
  delete: [WorkoutWhereUniqueInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  set: [WorkoutWhereUniqueInput!]
  update: [WorkoutUpdateWithWhereUniqueWithoutCordinatesInput!]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput!]
  upsert: [WorkoutUpsertWithWhereUniqueWithoutCordinatesInput!]
}

input WorkoutUpdateManyWithoutTrainerInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutTrainerInput!]
  delete: [WorkoutWhereUniqueInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  set: [WorkoutWhereUniqueInput!]
  update: [WorkoutUpdateWithWhereUniqueWithoutTrainerInput!]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput!]
  upsert: [WorkoutUpsertWithWhereUniqueWithoutTrainerInput!]
}

input WorkoutUpdateManyWithWhereNestedInput {
  data: WorkoutUpdateManyDataInput!
  where: WorkoutScalarWhereInput!
}

input WorkoutUpdateOneRequiredWithoutPartecipantsInput {
  connect: WorkoutWhereUniqueInput
  create: WorkoutCreateWithoutPartecipantsInput
  update: WorkoutUpdateWithoutPartecipantsDataInput
  upsert: WorkoutUpsertWithoutPartecipantsInput
}

input WorkoutUpdateWithoutCordinatesDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  isFree: BoolFieldUpdateOperationsInput
  onlineWorkout: OnlineWorkoutUpdateOneWithoutWorkoutInput
  partecipants: UsersOnWorkoutsUpdateManyWithoutWorkoutInput
  spots: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  trainer: UserUpdateOneRequiredWithoutTrainInput
  typology: Typology
}

input WorkoutUpdateWithoutPartecipantsDataInput {
  cordinates: CordinatesUpdateOneWithoutWorkoutInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  isFree: BoolFieldUpdateOperationsInput
  onlineWorkout: OnlineWorkoutUpdateOneWithoutWorkoutInput
  spots: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  trainer: UserUpdateOneRequiredWithoutTrainInput
  typology: Typology
}

input WorkoutUpdateWithoutTrainerDataInput {
  cordinates: CordinatesUpdateOneWithoutWorkoutInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  isFree: BoolFieldUpdateOperationsInput
  onlineWorkout: OnlineWorkoutUpdateOneWithoutWorkoutInput
  partecipants: UsersOnWorkoutsUpdateManyWithoutWorkoutInput
  spots: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  typology: Typology
}

input WorkoutUpdateWithWhereUniqueWithoutCordinatesInput {
  data: WorkoutUpdateWithoutCordinatesDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutUpdateWithWhereUniqueWithoutTrainerInput {
  data: WorkoutUpdateWithoutTrainerDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutUpsertWithoutPartecipantsInput {
  create: WorkoutCreateWithoutPartecipantsInput!
  update: WorkoutUpdateWithoutPartecipantsDataInput!
}

input WorkoutUpsertWithWhereUniqueWithoutCordinatesInput {
  create: WorkoutCreateWithoutCordinatesInput!
  update: WorkoutUpdateWithoutCordinatesDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutUpsertWithWhereUniqueWithoutTrainerInput {
  create: WorkoutCreateWithoutTrainerInput!
  update: WorkoutUpdateWithoutTrainerDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutWhereInput {
  AND: [WorkoutWhereInput!]
  cordinates: CordinatesWhereInput
  cordinatesId: IntNullableFilter
  createdAt: DateTimeFilter
  date: DateTimeNullableFilter
  description: StringNullableFilter
  duration: IntFilter
  id: IntFilter
  isFree: BoolFilter
  NOT: [WorkoutWhereInput!]
  onlineWorkout: OnlineWorkoutWhereInput
  OR: [WorkoutWhereInput!]
  partecipants: UsersOnWorkoutsListRelationFilter
  spots: IntFilter
  title: StringFilter
  trainer: UserWhereInput
  trainerId: IntFilter
  typology: Typology
}

input WorkoutWhereUniqueInput {
  id: Int
}
