generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  trainer
  admin
}

enum Gymler {
  basic
  early
}

enum Sex {
  male
  female
  unknown
}

enum Typology {
  online
  outdoor
}

model User {
  id           Int               @id @default(autoincrement())
  name         String
  surname      String?
  email        String            @unique
  password     String
  bio          String?
  confirmed    Boolean           @default(false)
  customerId   String?
  stripeId     String?
  facebookId   String?
  train        Workout[]         @relation("Train")
  role         Role              @default(user)
  sex          Sex               @default(unknown)
  birthDate    DateTime?
  avatarId     String?
  lastLoggedIn DateTime?
  classes      Int               @default(0)
  referrer     Referral[]        @relation("Referrer")
  referral     Referral[]        @relation("Referred")
  gymlerType   Gymler            @default(basic)
  workouts     UsersOnWorkouts[]

}

model Workout {
  id           Int               @id @default(autoincrement())
  title        String
  createdAt    DateTime          @default(now())
  description  String?
  duration     Int
  spots        Int               @default(25)
  date         DateTime?
  trainerId    Int
  trainer      User              @relation("Train", fields: [trainerId], references: [id])
  cordinates   Cordinates?        @relation(fields: [cordinatesId], references: [id])
  cordinatesId Int?
  partecipants UsersOnWorkouts[]
  isFree       Boolean           @default(false)
  typology     Typology @default(outdoor)
  onlineWorkout OnlineWorkout?
}

model OnlineWorkout {
  id      Int    @id @default(autoincrement())
  workout    Workout   @relation(fields: [workoutId], references: [id])
  workoutId  Int   
  link String
  passcode String
    zoomId String

}


model Cordinates {
  id        Int       @id @default(autoincrement())
  city      String?
  address   String?
  latitude  Float?
  longitude Float?
  workout   Workout[]
}

model Referral {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  completed  Boolean  @default(false)
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
  referrerId Int
  referred   User     @relation("Referred", fields: [referredId], references: [id])
  referredId Int      @unique
}

model UsersOnWorkouts {
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  attended  Boolean  @default(false)

  @@id([workoutId, userId])
}

model Token {
  token     String   @id
  createdAt DateTime @default(now())
}
